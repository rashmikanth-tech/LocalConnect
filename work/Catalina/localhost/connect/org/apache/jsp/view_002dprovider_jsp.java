/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-08-09 10:57:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.localconnect.dto.*;
import com.localconnect.repository.*;
import java.text.SimpleDateFormat;

public final class view_002dprovider_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.localconnect.repository");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.localconnect.dto");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String idParam = request.getParameter("id");
if (idParam == null || idParam.isEmpty()) {
out.println("<div class='alert alert-danger m-4'>‚ùå No provider selected.</div>");
return;
}

int providerId = Integer.parseInt(idParam);
UserRepositoryImpl userRepo = new UserRepositoryImpl();
UserDto provider = userRepo.getById(providerId);

if (provider == null || !"provider".equals(provider.getRole())) {
out.println("<div class='alert alert-danger m-4'>‚ùå Provider not found.</div>");
return;
}

// Fetch reviews
ReviewRepositoryImpl reviewRepo = new ReviewRepositoryImpl();
List<ReviewDto> reviews = reviewRepo.getReviewsByProvider(provider.getId());
    double avgRating = reviewRepo.getAverageRatingByProvider(provider.getId());

    SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy");

    // Determine back URL based on logged-in role
    UserDto loggedInUser = (UserDto) session.getAttribute("user");
    String backUrl = "login.jsp"; // default
    if (loggedInUser != null) {
    if ("user".equals(loggedInUser.getRole())) {
    backUrl = "search-services.jsp"; // or user dashboard
    } else if ("provider".equals(loggedInUser.getRole())) {
    backUrl = "provider-dashboard.jsp"; // provider dashboard
    }
    }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!DOCTYPE html>\r\n");
      out.write("    <html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta charset=\"UTF-8\">\r\n");
      out.write("        <title>");
      out.print( provider.getName() );
      out.write(" - Profile</title>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"/>\r\n");
      out.write("        <style>\r\n");
      out.write("            body { background-color: #f8f9fa; }\r\n");
      out.write("            .profile-card {\r\n");
      out.write("                max-width: 500px;\r\n");
      out.write("                margin: 40px auto;\r\n");
      out.write("                padding: 30px;\r\n");
      out.write("                border-radius: 15px;\r\n");
      out.write("                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\r\n");
      out.write("                background-color: #fff;\r\n");
      out.write("            }\r\n");
      out.write("            .profile-icon { font-size: 60px; color: #0d6efd; }\r\n");
      out.write("        </style>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <a href=\"");
      out.print( backUrl );
      out.write("\" class=\"btn btn-outline-secondary mt-4 mb-3\">‚Üê Back to Dashboard</a>\r\n");
      out.write("\r\n");
      out.write("        <!-- Profile Section -->\r\n");
      out.write("        <div class=\"profile-card text-center\">\r\n");
      out.write("            <div class=\"profile-icon mb-3\">üë§</div>\r\n");
      out.write("            <h3>");
      out.print( provider.getName() );
      out.write("</h3>\r\n");
      out.write("            <h5 class=\"text-warning\">\r\n");
      out.write("                ‚≠ê ");
      out.print( reviews.isEmpty() ? "No ratings yet" : String.format("%.1f", avgRating) + " / 5" );
      out.write("\r\n");
      out.write("                (");
      out.print( reviews.size() );
      out.write(" reviews)\r\n");
      out.write("            </h5>\r\n");
      out.write("            <hr/>\r\n");
      out.write("            <p><strong>Email:</strong> ");
      out.print( provider.getEmail() );
      out.write("</p>\r\n");
      out.write("            <p><strong>Contact:</strong> ");
      out.print( provider.getMobile() != null ? provider.getMobile() : "N/A" );
      out.write("</p>\r\n");
      out.write("            <p class=\"text-muted mt-4\">This is the public profile of the service provider.</p>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Reviews Section -->\r\n");
      out.write("        <div class=\"mt-5\">\r\n");
      out.write("            <h4>‚≠ê Reviews</h4>\r\n");
      out.write("            ");
 if (reviews.isEmpty()) { 
      out.write("\r\n");
      out.write("            <p class=\"text-muted\">No reviews yet for this provider.</p>\r\n");
      out.write("            ");
 } else { 
      out.write("\r\n");
      out.write("            <ul class=\"list-group\">\r\n");
      out.write("                ");
 for (ReviewDto r : reviews) { 
      out.write("\r\n");
      out.write("                <li class=\"list-group-item\">\r\n");
      out.write("                    <strong>Rating:</strong> ");
      out.print( r.getRating() );
      out.write(" / 5 <br/>\r\n");
      out.write("                    ");
      out.print( (r.getComment() != null && !r.getComment().trim().isEmpty()) ? r.getComment() : "<em>No comment provided</em>" );
      out.write("\r\n");
      out.write("                    <div class=\"text-muted small mt-1\">\r\n");
      out.write("                        by ");
      out.print( r.getUserName() != null ? r.getUserName() : "Anonymous" );
      out.write("\r\n");
      out.write("                        ");
 if (r.getCreatedAt() != null) { 
      out.write("\r\n");
      out.write("                        on ");
      out.print( (r.getCreatedAt() instanceof java.util.Date)
                        ? sdf.format((java.util.Date) r.getCreatedAt())
                        : r.getCreatedAt().toString() );
      out.write("\r\n");
      out.write("                        ");
 } 
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </li>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    </body>\r\n");
      out.write("    </html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
